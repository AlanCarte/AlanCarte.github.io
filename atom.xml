<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alan-Blog</title>
  
  <subtitle>山山而川 人生尔尔</subtitle>
  <link href="https://github.com/AlanCarte/AlanCarte.github.io/project/atom.xml" rel="self"/>
  
  <link href="https://github.com/AlanCarte/AlanCarte.github.io/project/"/>
  <updated>2023-06-21T15:25:16.261Z</updated>
  <id>https://github.com/AlanCarte/AlanCarte.github.io/project/</id>
  
  <author>
    <name>Alan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/21/hello-world/"/>
    <id>https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/21/hello-world/</id>
    <published>2023-06-21T15:25:16.261Z</published>
    <updated>2023-06-21T15:25:16.261Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis基础入门篇</title>
    <link href="https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/20/MyBatis%E5%9F%BA%E7%A1%80%E4%BA%BA%E7%AF%87/"/>
    <id>https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/20/MyBatis%E5%9F%BA%E7%A1%80%E4%BA%BA%E7%AF%87/</id>
    <published>2023-06-20T04:30:00.000Z</published>
    <updated>2023-06-28T07:11:53.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MayBatis基础快速入门"><a href="#MayBatis基础快速入门" class="headerlink" title="MayBatis基础快速入门"></a>MayBatis基础快速入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="如下教程学习自尚硅谷杨博超老师的MyBatis-Plus教程"><a href="#如下教程学习自尚硅谷杨博超老师的MyBatis-Plus教程" class="headerlink" title="如下教程学习自尚硅谷杨博超老师的MyBatis-Plus教程"></a><strong>如下教程学习自尚硅谷杨博超老师的<a href="https://www.bilibili.com/video/BV12R4y157Be/?p=1">MyBatis-Plus教程</a></strong></h3><div class="note no-icon flat"><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></div><p><img src="/image/relationship-with-mybatis.png" alt=""></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="支持数据库支持数据库"><a href="#支持数据库支持数据库" class="headerlink" title="支持数据库支持数据库"></a>支持数据库支持数据库</h2><div class="note no-icon flat"><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></div><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb，informix，TDengine，redshift</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库，优炫数据库</li></ul><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><p><img src="/image/mybatis-plus-framework.jpg" alt=""></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，我们假设您已经：</p><ul><li>拥有 Java 开发环境以及相应 IDE</li><li>熟悉 Spring Boot</li><li>熟悉 Maven</li></ul><p>现有一张 <code>User</code> 表，其表结构如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">email</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Jone</td><td style="text-align:center">18</td><td style="text-align:center">test1@baomidou.com</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Jack</td><td style="text-align:center">20</td><td style="text-align:center">test2@baomidou.com</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Tom</td><td style="text-align:center">28</td><td style="text-align:center">test3@baomidou.com</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Sandy</td><td style="text-align:center">21</td><td style="text-align:center">test4@baomidou.com</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Billie</td><td style="text-align:center">24</td><td style="text-align:center">test5@baomidou.com</td></tr></tbody></table></div><p>其对应的数据库 Schema 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其对应的数据库 Data 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="note red no-icon flat"><p>Question</p><p>如果从零开始用 MyBatis-Plus 来实现该表的增删改查我们需要做什么呢？</p></div><h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>​    创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）</p><div class="note green no-icon flat"><p>提示</p><p>可以使用 <a href="https://start.spring.io/">Spring Initializer (opens new window)</a>快速初始化一个 Spring Boot 工程</p></div><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>引入 Spring Boot Starter 父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5+ 版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>、<code>mybatis-plus-boot-starter</code>、<code>h2</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 <code>application.yml</code> 配置文件中添加 H2 数据库的相关配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataSource Config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">schema-locations:</span> <span class="string">classpath:db/schema-h2.sql</span></span><br><span class="line">      <span class="attr">data-locations:</span> <span class="string">classpath:db/data-h2.sql</span></span><br></pre></td></tr></table></figure><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/">Lombok</a> 简化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 Mapper 包下的 <code>UserMapper</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>添加测试类，进行功能测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p>UserMapper 中的 <code>selectList()</code> 方法的参数为 MP 内置的条件封装器 <code>Wrapper</code>，所以不填写就是无任何条件</p></div><p>控制台输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com)</span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p class='p gren'>提示</p><p>完整的代码示例请移步：<a href="https://github.com/baomidou/mybatis-plus-samples/tree/master/mybatis-plus-sample-quickstart">Spring Boot 快速启动示例 (opens new window)</a>| <a href="https://github.com/baomidou/mybatis-plus-samples/tree/master/mybatis-plus-sample-quickstart-springmvc">Spring MVC 快速启动示例</a></p></div><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>全新的 <code>MyBatis-Plus</code> 3.0 版本基于 JDK8，提供了 <code>lambda</code> 形式的调用，所以安装集成 MP3.0 要求如下：</p><ul><li>JDK 8+</li><li>Maven or Gradle</li></ul><div class="note blue no-icon flat"><p class='p green'>提示</p><p>JDK7 及以下的请参考 MP2.0 版本，地址：<a href="https://baomidou.gitee.io/mybatis-plus-doc/#/">2.0 文档</a></p></div><h2 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h2><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>Maven：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gradle Version:&lt;4.1</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.baomidou&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis-plus-boot-starter&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;最新版本&#x27;</span></span><br><span class="line"><span class="comment">//Gradle Version:&gt;=4.1 (The function compile has been deprecated since Gradle 4.10, and removed since Gradle 7.0. Please use implementation instead.)</span></span><br><span class="line">implementation <span class="string">&#x27;com.baomidou:mybatis-plus-boot-starter:最新版本&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Maven:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gradle Version:&lt;4.1</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.baomidou&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis-plus&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;最新版本&#x27;</span></span><br><span class="line"><span class="comment">//Gradle Version:&gt;=4.1 (The function compile has been deprecated since Gradle 4.10, and removed since Gradle 7.0. Please use implementation instead.)</span></span><br><span class="line">implementation <span class="string">&#x27;com.baomidou:mybatis-plus:最新版本&#x27;</span></span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p class='p yellow'>注意</p><p>引入 <code>MyBatis-Plus</code> 之后请不要再次引入 <code>MyBatis</code> 以及 <code>MyBatis-Spring</code>，以避免因版本差异导致的问题。</p></div><h2 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h2><p>快照 SNAPSHOT 版本需要添加仓库，且版本号为快照版本 <a href="https://oss.sonatype.org/content/repositories/snapshots/com/baomidou/mybatis-plus-boot-starter/">点击查看最新快照版本号</a></p><p>Maven:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://oss.sonatype.org/content/repositories/snapshots/&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h1><p>MyBatis-Plus 的配置异常的简单，我们仅需要一些简单的配置即可使用 MyBatis-Plus 的强大功能！</p><div class="note blue no-icon flat"><p class='p green'>提示</p><p>在讲解配置之前，请确保您已经安装了 MyBatis-Plus，如果您尚未安装，请查看 <a href="https://baomidou.com/pages/bab2db/">安装</a> 一章。</p></div><h2 id="Spring-Boot-工程"><a href="#Spring-Boot-工程" class="headerlink" title="Spring Boot 工程"></a>Spring Boot 工程</h2><ul><li>配置 MapperScan 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-工程"><a href="#Spring-工程" class="headerlink" title="Spring 工程"></a>Spring 工程</h2><ul><li>配置 MapperScan</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>调整 SqlSessionFactory 为 MyBatis-Plus 的 SqlSessionFactory</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>本文将介绍 <code>MybatisPlus</code> 注解包相关类详解（更多详细描述可点击查看源码注释）</p><div class="note no-icon flat"><p>注解类包源码：👉 <a href="https://gitee.com/baomidou/mybatis-plus/tree/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation">mybatis-plus-annotation</a></p></div><h2 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableName.java">TableName</a></h2><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">类型</th><th style="text-align:left">必须指定</th><th style="text-align:left">默认值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>value</td><td style="text-align:left">String</td><td style="text-align:left">否</td><td style="text-align:left">“”</td><td style="text-align:left">表名</td></tr><tr><td>schema</td><td style="text-align:left">String</td><td style="text-align:left">否</td><td style="text-align:left">“”</td><td style="text-align:left">schema</td></tr><tr><td>keepGlobalPrefix</td><td style="text-align:left">boolean</td><td style="text-align:left">否</td><td style="text-align:left">false</td><td style="text-align:left">是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td></tr><tr><td>resultMap</td><td style="text-align:left">String</td><td style="text-align:left">否</td><td style="text-align:left">“”</td><td style="text-align:left">xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td></tr><tr><td>aytoResultMap</td><td style="text-align:left">boolean</td><td style="text-align:left">否</td><td style="text-align:left">false</td><td style="text-align:left">是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td></tr><tr><td>excludeProperty</td><td style="text-align:left">String[]</td><td style="text-align:left">否</td><td style="text-align:left">{}</td><td style="text-align:left">需要排除的属性名 @since 3.3.1</td></tr></tbody></table></div><p><strong>关于 <code>autoResultMap</code> 的说明：</strong></p><p>MP 会自动构建一个 <code>resultMap</code> 并注入到 MyBatis 里（一般用不上），请注意以下内容：</p><p>因为 MP 底层是 MyBatis，所以 MP 只是帮您注入了常用 CRUD 到 MyBatis 里，注入之前是动态的（根据您的 Entity 字段以及注解变化而变化），但是注入之后是静态的（等于 XML 配置中的内容）。</p><p>而对于 <code>typeHandler</code> 属性，MyBatis 只支持写在 2 个地方:</p><ol><li>定义在 resultMap 里，作用于查询结果的封装</li><li>定义在 <code>insert</code> 和 <code>update</code> 语句的 <code>#&#123;property&#125;</code> 中的 <code>property</code> 后面（例：<code>#&#123;property,typehandler=xxx.xxx.xxx&#125;</code>），并且只作用于当前 <code>设置值</code></li></ol><p>除了以上两种直接指定 <code>typeHandler</code> 的形式，MyBatis 有一个全局扫描自定义 <code>typeHandler</code> 包的配置，原理是根据您的 <code>property</code> 类型去找其对应的 <code>typeHandler</code> 并使用。</p><h2 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableId.java">TableId</a></h2><ul><li>描述：主键注解</li><li>使用位置：实体类主键字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>属性</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>主键字段名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>idType.NOME</td><td>指定主键类型</td></tr></tbody></table></div><h3 id="IdType"><a href="#IdType" class="headerlink" title="IdType"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java">IdType</a></h3><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库 ID 自增</td></tr><tr><td>NONE</td><td>无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td>INPUT</td><td>insert 前自行 set 主键值</td></tr><tr><td>ASSIGN_ID</td><td>分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td>ASSIGN_UUID</td><td>分配 UUID,主键类型为 String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认 default 方法)</td></tr><tr><td><del>ID_WORKER</del></td><td>分布式全局唯一 ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td><del>UUID</del></td><td>32 位 UUID 字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td><del>ID_WORKER_STR</del></td><td>分布式全局唯一 ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table></div><h2 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java">@TableField</a></h2><ul><li>描述：字段注解（非主键）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>数据库字段名</td></tr><tr><td>exist</td><td>boolean</td><td>否</td><td>true</td><td>是否为数据库表字段</td></tr><tr><td>condition</td><td>String</td><td>否</td><td>“”</td><td>字段 <code>where</code> 实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局的 `%s=#</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MayBatis基础快速入门&quot;&gt;&lt;a href=&quot;#MayBatis基础快速入门&quot; class=&quot;headerlink&quot; title=&quot;MayBatis基础快速入门&quot;&gt;&lt;/a&gt;MayBatis基础快速入门&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://github.com/AlanCarte/AlanCarte.github.io/project/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MyBatis" scheme="https://github.com/AlanCarte/AlanCarte.github.io/project/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>微机原理与接口技术</title>
    <link href="https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/15/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
    <id>https://github.com/AlanCarte/AlanCarte.github.io/project/2023/06/15/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</id>
    <published>2023-06-15T08:30:00.000Z</published>
    <updated>2023-06-28T04:58:16.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微机原理与接口技术"><a href="#微机原理与接口技术" class="headerlink" title="微机原理与接口技术"></a>微机原理与接口技术</h1><h2 id="第一章-微型计算机系统概述"><a href="#第一章-微型计算机系统概述" class="headerlink" title="第一章 微型计算机系统概述"></a>第一章 微型计算机系统概述</h2><h3 id="1-微型计算机系统组成"><a href="#1-微型计算机系统组成" class="headerlink" title="1. 微型计算机系统组成"></a>1. 微型计算机系统组成</h3><ol><li>微处理器:运算器、控制器、寄存器</li><li>微型计算机：输入输出接口、总线、内存</li><li>微型计算机系统：由硬件和软件共同组成的完整的计算机系统</li></ol><h3 id="2-系统总线"><a href="#2-系统总线" class="headerlink" title="2. 系统总线"></a>2. 系统总线</h3><ul><li>地址总线AB</li><li>输出将要访问的内存单元或I/O端口的地址</li><li>地址线的多少决定了系统直接寻址存储器的范围</li><li>数据总线DB</li><li>CPU读操作时，外部数据通过数据总线送往CPU</li><li>CPU写操作时，CPU数据通过数据总线送往外部</li><li>数据线的多少决定了一次能够传送数据的位数</li><li>控制总线CB</li><li>协调系统中各部件的操作，有输出控制、输入状态等信号</li><li>控制总线决定了系统总线的特点，例如功能、适应性等</li></ul><h3 id="3-基于8088CPU的PC微机系统结构"><a href="#3-基于8088CPU的PC微机系统结构" class="headerlink" title="3. 基于8088CPU的PC微机系统结构"></a>3. 基于8088CPU的PC微机系统结构</h3><ol><li>运算器：包括算术逻辑单元（ALU），对数据进行算术或者逻辑运算</li><li>控制器：包括指令寄存器、指令译码器、定时控制电路。执行一条指令的流程为：取指令，翻译指令，执行指令 </li><li>寄存器阵列：包括通用寄存器和专用寄存器，通用寄存器用来存放临时数据，专用寄存器有PC和SP等</li></ol><h3 id="4-微处理器（CPU）内部结构"><a href="#4-微处理器（CPU）内部结构" class="headerlink" title="4. 微处理器（CPU）内部结构"></a>4. 微处理器（CPU）内部结构</h3><ul><li><p>指令处理单元（控制器）：对机器指令<strong>译码</strong>，产生指令执行所需的<strong>控制信</strong>号，并按照指令规定的时序将控制信号<strong>传送</strong>到CPU内部各器件或传送到总线。</p></li><li><p>算术逻辑单元（运算器）：接收到控制器发出的各种运算控制信号后，执行相应运算，并影响相应标志位。</p></li><li><p>寄存器组：CPU内用于暂时存放数据、地址的存储单元，CPU从内存读取指令、在内存中读写数据，均需要这些寄存器完成寻址、暂存的功能。其中标志寄存器能够间接影响程序执行流程</p></li><li><p>8088的内部结构从功能分成两个单元</p><p>a. 总线接口单元BIU——管理8088与系统总线的接口，负责CPU对存储器和外设进行访问</p><p>b. 执行单元EU——负责指令的译码、执行和数据的运算</p><p>c. 两个单元相互独立，分别完成各自操作</p><p> 两个单元可以并行执行，实现指令取指和执行的流水线操作</p></li></ul><h2 id="8088-CPU-外部特性与IBM-PC总线结构"><a href="#8088-CPU-外部特性与IBM-PC总线结构" class="headerlink" title="8088 CPU 外部特性与IBM PC总线结构"></a>8088 CPU 外部特性与IBM PC总线结构</h2><p><img src="/image/01.png" alt="01"></p><h3 id="1-8088的两种组态模式"><a href="#1-8088的两种组态模式" class="headerlink" title="1. 8088的两种组态模式"></a>1. 8088的两种组态模式</h3><ul><li>MN/MX*接高电平为最小组态模式</li><li>MN/MX*接低电平为最大组态模式</li></ul><h3 id="2-8088最小组态的引脚信号"><a href="#2-8088最小组态的引脚信号" class="headerlink" title="2. 8088最小组态的引脚信号"></a>2. 8088最小组态的引脚信号</h3><h5 id="1-数据和地址引脚"><a href="#1-数据和地址引脚" class="headerlink" title="1. 数据和地址引脚"></a>1. 数据和地址引脚</h5><ol><li>AD7～AD0</li></ol><ul><li>地址/数据分时复用引脚，双向、三态</li><li>在访问存储器或外设的总线操作周期中，这些引脚在第一个时钟周期输出存储器或I/O端口的低8位地址A7～A0</li><li>其他时间用于传送8位数据D7～D0</li></ul><ol><li>A15～A8（Address）<br>中间8位地址引脚，输出、三态<br>这些引脚在访问存储器或外设时，提供全部20位地址中的中间8位地址A15～A8</li><li>A19/S6～A16/S3（Address/Status）</li></ol><ul><li>地址/状态分时复用引脚，输出、三态</li><li>这些引脚在访问存储器的第一个时钟周期输出高4位地址A19～A16</li><li>在访问外设的第一个时钟周期全部输出低电平无效</li><li>其他时间输出状态信号S6～S3</li><li>S6始终为低；</li><li>S5为标志寄存器的中断允许标志的状态位，它在每一个时钟周期开始时被修改；</li><li>S4和S3用以指示是哪一个段寄存器正在被使用，00为ES，01为SS，10为CS，11为DS。</li><li>在DMA方式时这4条线处于高阻状态</li></ul><h5 id="2-读写控制引脚"><a href="#2-读写控制引脚" class="headerlink" title="2. 读写控制引脚"></a>2. 读写控制引脚</h5><ol><li>ALE（Address Latch Enable）</li></ol><ul><li>地址锁存允许，输出、三态、高电平有效</li><li>ALE引脚高有效时，表示复用引脚：AD7～AD0和A19/S6～A16/S3正在传送地址信息</li><li>由于地址信息在这些复用引脚上出现的时间很短暂，所以系统可以利用ALE引脚将地址锁存起来</li></ul><ol><li>IO/M*（Input and Output/Memory）</li></ol><ul><li>I/O或存储器访问，输出、三态</li><li>该引脚输出高电平时，表示CPU将访问I/O端口，这时地址总线A15～A0提供16位I/O口地址</li><li>该引脚输出低电平时，表示CPU将访问存储器，这时地址总线A19～A0提供20位存储器地址</li></ul><ol><li>WR*（Write）</li></ol><ul><li>写控制，输出、三态、低电平有效</li><li>有效时，表示CPU正在写出数据给存储器或I/O端口</li></ul><ol><li>RD*（Read）</li></ol><ul><li>读控制，输出、三态、低电平有效</li><li>有效时，表示CPU正在从存储器或I/O端口读入数据</li></ul><ol><li>READY</li></ol><ul><li>存储器或I/O口就绪，输入、高电平有效</li><li>在总线操作周期中，8088CPU会在第3个时钟周期的前沿（下降沿）测试该引脚<br>如果测到高有效，CPU直接进入第4个时钟周期<br>如果测到无效，CPU将插入等待周期Tw</li><li>CPU在等待周期中仍然要监测READY信号，有效则进入第4个时钟周期，否则继续插入等待周期Tw</li></ul><ol><li>DEN*（Data Enable）</li></ol><ul><li>数据允许，输出、三态、低电平有效</li><li>有效时，表示当前数据总线上正在传送数据，可利用他来控制对数据总线的驱动</li></ul><ol><li>DT/R*（Data Transmit/Receive）</li></ol><ul><li>数据发送/接收，输出、三态</li><li>该信号表明当前总线上数据的流向<br>高电平时数据自CPU输出（发送）<br>低电平时数据输入CPU（接收）</li></ul><ol><li>SS0*（System Status 0）<br>最小组态模式下的状态输出信号</li></ol><ul><li>它与IO/M<em>和DT/R</em>一道，通过编码指示CPU在最小组态下的8种工作状态：</li></ul><h5 id="3-中断请求和响应引脚"><a href="#3-中断请求和响应引脚" class="headerlink" title="3. 中断请求和响应引脚"></a>3. 中断请求和响应引脚</h5><ol><li>INTR（Interrupt Request）</li></ol><ul><li>可屏蔽中断请求，输入、高电平有效</li><li>有效时，表示请求设备向CPU申请可屏蔽中断</li><li>该请求的优先级别较低，并可通过关中断指令CLI清除标志寄存器中的IF标志、从而对中断请求进行屏蔽</li></ul><ol><li>INTA*（Interrupt Acknowledge）</li></ol><ul><li>可屏蔽中断响应，输出、低电平有效</li><li>有效时，表示来自INTR引脚的中断请求已被CPU响应，CPU进入中断响应周期</li><li>中断响应周期是连续的两个，每个都发出有效响应信号，以便通知外设他们的中断请求已被响应、并令有关设备将中断向量号送到数据总线</li></ul><ol><li>NMI（Non-Maskable Interrupt）</li></ol><ul><li>不可屏蔽中断请求，输入、上升沿有效</li><li>有效时，表示外界向CPU申请不可屏蔽中断</li><li>该请求的优先级别高于INTR，并且不能在CPU内被屏蔽</li><li>当系统发生紧急情况时，可通过他向CPU申请不可屏蔽中断服务</li></ul><h5 id="4-总线请求和响应引脚"><a href="#4-总线请求和响应引脚" class="headerlink" title="4. 总线请求和响应引脚"></a>4. 总线请求和响应引脚</h5><ol><li>HOLD</li></ol><ul><li>总线保持（即总线请求），输入、高电平有效</li><li>有效时，表示总线请求设备向CPU申请占有总线</li></ul><ol><li>HLDA（HOLD Acknowledge）</li></ol><ul><li>总线保持响应（即总线响应），输出、高电平有效</li><li>有效时，表示CPU已响应总线请求并已将总线释放</li><li>此时CPU的地址总线、数据总线及具有三态输出能力的控制总线将全面呈现高阻，使总线请求设备可以顺利接管总线</li><li>待到总线请求信号HOLD无效，总线响应信号HLDA也转为无效，CPU重新获得总线控制权</li></ul><ol><li>RESET</li></ol><ul><li>复位请求，输入、高电平有效</li><li>该信号有效，将使CPU回到其初始状态；当它再度返回无效时，CPU将重新开始工作<br>8088/86复位后<br>CS＝FFFFH、IP＝0000H，<br>所以程序入口在物理地址FFFF0H</li></ul><ol><li>CLK（Clock）<br>时钟输入</li></ol><h5 id="5-其它引脚"><a href="#5-其它引脚" class="headerlink" title="5. 其它引脚"></a>5. 其它引脚</h5><ol><li>MN/MX*（Minimum/Maximum）<br>组态选择，输入</li><li>TEST*<br>测试，输入、低电平有效</li></ol><h5 id="6-8088的基本总线时序"><a href="#6-8088的基本总线时序" class="headerlink" title="6. 8088的基本总线时序"></a>6. 8088的基本总线时序</h5><ol><li>总线时序描述CPU引脚如何实现总线操作</li></ol><ul><li>描述总线操作的微处理器时序有三级：<br>指令周期 → 总线周期 → 时钟周期</li><li>指令周期是指一条指令经取指、译码、读写操作数到执行完成的过程。若干总线周期组成一个指令周期</li><li>总线周期是指CPU通过总线操作与外部（存储器或I/O端口）进行一次数据交换的过程</li><li>8088的基本总线周期需要4个时钟周期</li><li>总线操作中如何实现CPU与内存、接口芯片间的时序同步是关键</li><li>同步时序：<br>各部件都以系统时钟信号为基准<br>当相互不能配合时，快速部件（CPU）插入等待状态等待慢速部件（I/O和存储器）</li><li>异步时序：<br>CPU与外设接口通过应答联络信号实现同步操作</li></ul><h5 id="7-8088最小组态的总线时序"><a href="#7-8088最小组态的总线时序" class="headerlink" title="7. 8088最小组态的总线时序"></a>7. 8088最小组态的总线时序</h5><ul><li>存储器读总线周期</li><li>存储器写总线周期</li><li>I/O读总线周期</li><li>I/O写总线周期</li></ul><h5 id="8-8088最大组态中的引脚定义"><a href="#8-8088最大组态中的引脚定义" class="headerlink" title="8. 8088最大组态中的引脚定义"></a>8. 8088最大组态中的引脚定义</h5><ul><li>有些控制信号不相同，主要是用于输出操作编码信号，由总线控制器8288译码产生系统控制信号：</li><li>LOCK*——总线封锁信号</li><li>S2<em>、S1</em>、S0*——3个状态信号</li><li>QS1、QS0——指令队列状态信号</li><li>RQ<em>/GT0</em>、RQ<em>/GT1</em>——2个总线请求/同意信号</li></ul><h5 id="9-8088最大组态的总线形成"><a href="#9-8088最大组态的总线形成" class="headerlink" title="9. 8088最大组态的总线形成"></a>9. 8088最大组态的总线形成</h5><p>系统地址总线</p><ol><li>采用三态透明锁存器74LS373和三态单向缓冲器74LS244</li><li>系统数据总线<br>通过三态双向缓冲器74LS245形成和驱动</li><li>系统控制总线<br>主要由总线控制器8288形成<br>MEMR<em>、MEMW</em>、IOR<em>、IOW</em>、INTA*</li></ol><hr><h2 id="第二章-半导体存储器及接口"><a href="#第二章-半导体存储器及接口" class="headerlink" title="第二章 半导体存储器及接口"></a>第二章 半导体存储器及接口</h2><h5 id="1-半导体存储器的分类"><a href="#1-半导体存储器的分类" class="headerlink" title="1. 半导体存储器的分类"></a>1. 半导体存储器的分类</h5><ol><li>读写存储器RAM：SRAM.DRAM,NVRAM</li><li>只读存储器ROM</li></ol><ul><li>掩膜ROM：信息制作在芯片中，不可更改</li><li>PROM：允许一次编程，此后不可更改</li><li>EPROM：用紫外光擦除，擦除后可编程；并允许用户多次擦除和编程</li><li>EEPROM（E2PROM）：采用加电方法在线进行擦除和编程，也可多次擦写</li><li>Flash Memory（闪存）：能够快速擦写的EEPROM，但只能按块（Block）擦除</li></ul><h5 id="2-半导体存储器芯片的内部结构"><a href="#2-半导体存储器芯片的内部结构" class="headerlink" title="2. 半导体存储器芯片的内部结构"></a>2. 半导体存储器芯片的内部结构</h5><ol><li>每个存储单元具有一个唯一的地址，可存储1位（位片结构）或多位（字片结构）二进制数据</li></ol><ul><li>存储容量（bits）与地址、数据线个数有关：<br>芯片的存储容量＝2^M×N<br>＝存储单元数×存储单元的位数</li></ul><ol><li>地址译码电路结构<br>单译码，双译码</li><li>片选和读写控制逻辑<br>片选端CS<em>或CE</em><br>有效时，可以对该芯片进行读写操作<br>输出OE<em><br>控制读操作。有效时，芯片内数据输出<br>该控制端对应系统的读控制线<br>写WE</em><br>控制写操作。有效时，数据进入芯片中<br>该控制端对应系统的写控制线</li></ol><h5 id="4-随机存取存储器"><a href="#4-随机存取存储器" class="headerlink" title="4. 随机存取存储器"></a>4. 随机存取存储器</h5><ol><li>静态RAM（SRAM）</li></ol><p><img src="/image/02.png" alt="02"></p><ul><li>SRAM的基本存储单元是触发器电路</li><li>SRAM一般采用“字结构”存储矩阵</li><li>SRAM芯片2114外部特性：<br>10根地址线A9～A0<br>4根数据线I/O4～I/O1<br>片选CS<em><br>读写WE</em></li><li>SRAM芯片6264外部特性<br>28个引脚：<br>13根地址线A12～A0<br>8根数据线D7～D0<br>片选CS1<em>、CS2<br>读写WE</em>、OE*</li></ul><ol><li>动态RAM</li></ol><ul><li>每个存储单元存放一位，芯片内每个位单元具有独立地址</li><li>需要8个存储芯片构成一个字节单元，每个</li><li>DRAM芯片4116外部特性</li><li><ul><li>7根地址线A6～A0,</li></ul></li><li><ul><li>1根数据输入线DIN,</li></ul></li><li><ul><li>1根数据输出线DOUT,</li></ul></li><li><ul><li>行地址选通RAS*,</li></ul></li><li><ul><li>列地址选通CAS*,</li></ul></li><li><ul><li>读写控制WE*.</li></ul></li><li>DRAM 4116的刷新:采用“仅行地址有效”方法刷新</li><li>DRAM芯片2164外部特性</li><li><ul><li>8根地址线A7～A0<br>1根数据输入线DIN<br>1根数据输出线DOUT<br>行地址选通RAS<em><br>列地址选通CAS</em><br>读写控制WE*</li></ul></li></ul><h5 id="5-只读存储器"><a href="#5-只读存储器" class="headerlink" title="5. 只读存储器"></a>5. 只读存储器</h5><ol><li>EPROM 2716</li></ol><ul><li>11根地址线A10～A0<br>8根数据线DO7～DO0<br>片选/编程CE<em>/PGM<br>读写OE</em><br>编程电压VPP</li></ul><ol><li>EPROM 2764</li></ol><ul><li>13根地址线A12～A0<br>8根数据线D7～D0<br>片选CE<em><br>编程PGM</em><br>读写OE*<br>编程电压VPP</li></ul><ol><li>EEPROM<br>用加电方法，进行在线（无需拔下，直接在电路中）擦写（擦除和编程一次完成）</li><li>EEPROM 2717A</li></ol><ul><li>11根地址线A10～A0<br>8根数据线I/O7～I/O0<br>片选CE<em><br>读写OE</em>、WE<em><br>状态输出RDY/BUSY</em></li></ul><ol><li>EEPROM 2864A</li></ol><ul><li>13根地址线A12～A0<br>8根数据线I/O7～I/O0<br>片选CE<em><br>读写OE</em>、WE*</li></ul><h5 id="6-半导体存储器与CPU的连接"><a href="#6-半导体存储器与CPU的连接" class="headerlink" title="6. 半导体存储器与CPU的连接"></a>6. 半导体存储器与CPU的连接</h5><ol><li>存储芯片的数据线</li></ol><ul><li>若芯片的数据线正好8根：<br>一次可从芯片中访问到8位数据，全部数据线与系统的8位数据总线相连</li><li>若芯片的数据线不足8根：一次不能从一个芯片中访问到8位数据，“位扩充”</li></ul><p><img src="/image/03.png" alt="03"></p><ol><li>存储芯片的地址线</li></ol><ul><li>芯片的地址线通常应全部与系统的低位地址总线相连</li><li>寻址时，这部分地址的译码是在存储芯片内完成的，我们称为“<strong>片内译码</strong>”</li></ul><ol><li>存储芯片的片选端</li></ol><ul><li>存储系统常需利用多个存储芯片扩充容量，也就是扩充了存储器地址范围</li><li>进行“地址扩充”，需要利用存储芯片的片选端对多个存储芯片（组）进行寻址</li><li>这个寻址方法，主要通过将存储芯片的片选端与系统的高位地址线相关联来实现</li><li>这种扩充简称为“地址扩充”或“字扩充”</li></ul><p><strong>译码和译码器</strong></p><p><strong>全译码</strong></p><ol><li>所有的系统地址线均参与对存储单元的译码寻址</li><li>包括低位地址线对芯片内各存储单元的译码寻址（片内译码），高位地址线对存储芯片的译码寻址（片选译码）</li><li>采用全译码，每个存储单元的地址都是唯一的，不存在地址重复</li><li>译码电路可能比较复杂、连线也较多</li></ol><p><strong>部分译码</strong></p><ol><li>只有部分（高位）地址线参与对存储芯片的译码</li><li>每个存储单元将对应多个地址（地址重复），需要选取一个可用地址</li><li>可简化译码电路的设计</li><li>但系统的部分地址空间将被浪费</li></ol><p><strong>线选译码</strong></p><ul><li>只用少数几根高位地址线进行芯片的译码，且每根负责选中一个芯片（组）</li><li>虽构成简单，但地址空间严重浪费，必然会出现地址重复</li><li>一个存储地址会对应多个存储单元</li><li>多个存储单元共用的存储地址不应使用</li></ul><ol><li>存储芯片的读写控制线</li></ol><ul><li>芯片OE*与系统的读命令线相连<br>当芯片被选中、且读命令有效时，存储芯片将开放并驱动数据到总线</li><li>芯片WE*与系统的写命令线相连<br>当芯片被选中、且写命令有效时，允许总线数据写入存储芯片</li></ul><h5 id="7-存储芯片与CPU的配合"><a href="#7-存储芯片与CPU的配合" class="headerlink" title="7. 存储芯片与CPU的配合"></a>7. 存储芯片与CPU的配合</h5><ol><li>总线驱动</li></ol><ul><li>CPU的总线驱动能力有限</li><li>单向传送的地址和控制总线，可采用三态锁存器和三态单向驱动器等来加以锁存和驱动</li><li>双向传送的数据总线，可以采用三态双向驱动器来加以驱动</li></ul><ol><li>时序配合</li></ol><ul><li>分析存储器的存取速度是否满足CPU总线时序的要求<br>如果不能满足：考虑更换芯片，总线周期中插入等待状态TW</li></ul><h5 id="8-8086存储器组织"><a href="#8-8086存储器组织" class="headerlink" title="8. 8086存储器组织"></a>8. 8086存储器组织</h5><ol><li>寻址空间(20位地址线)<br>220＝1M bytes的存储器寻址空间<br>分段的概念</li><li>分段组织<br>段寄存器的16位值左移4位，得到的20位值加上16位的偏移量。</li><li>字与字节访问<br>AD0 信号和BHE信号组合，选择奇偶字节或字。</li></ol><hr><h2 id="第三章-基本输入输出接口"><a href="#第三章-基本输入输出接口" class="headerlink" title="第三章 基本输入输出接口"></a>第三章 基本输入输出接口</h2><h3 id="I-O接口概述"><a href="#I-O接口概述" class="headerlink" title="I/O接口概述"></a>I/O接口概述</h3><ul><li>I/O接口是位于系统与外设间、用来协助完成数据传送和控制任务的逻辑电路</li><li>PC机系统板的可编程接口芯片、I/O总线槽的电路板（适配器）都是接口电路</li></ul><ol><li>信号转换<br>对信号的形式和数据的格式进行变换<br>微机直接处理：数字量、开关量、脉冲量</li><li>数据缓冲<br>对输入输出数据进行缓冲和锁存<br>输出锁存缓冲环节，输入锁存缓冲环节</li><li>对I/O端口进行寻址</li><li>与CPU和I/O设备进行联络</li></ol><h3 id="I-O接口的典型结构"><a href="#I-O接口的典型结构" class="headerlink" title="I/O接口的典型结构"></a>I/O接口的典型结构</h3><h5 id="1-接口电路的内部结构"><a href="#1-接口电路的内部结构" class="headerlink" title="1. 接口电路的内部结构"></a>1. 接口电路的内部结构</h5><ul><li>数据寄存器<br>保存外设给CPU和CPU发往外设的数据</li><li>状态寄存器<br>保存外设或接口电路的状态</li><li>控制寄存器<br>保存CPU给外设或接口电路的命令</li></ul><h5 id="2-接口电路的外部特性"><a href="#2-接口电路的外部特性" class="headerlink" title="2. 接口电路的外部特性"></a>2. 接口电路的外部特性</h5><ul><li>面向CPU一侧的信号：用于与CPU连接、主要是数据、地址和控制信号</li><li>面向外设一侧的信号：用于与外设连接、提供的信号种类繁多、功能定义、时序及有效电平等差异较大</li></ul><h5 id="3-接口电路芯片的分类"><a href="#3-接口电路芯片的分类" class="headerlink" title="3. 接口电路芯片的分类"></a>3. 接口电路芯片的分类</h5><ul><li>通用接口芯片<br>支持通用的数据输入输出和控制的接口芯片</li><li>面向外设的专用接口芯片<br>针对某种外设设计、与该种外设接口</li><li>面向微机系统的专用接口芯片<br>与CPU和系统配套使用，以增强其总体功能</li></ul><h5 id="4-接口电路的可编程性"><a href="#4-接口电路的可编程性" class="headerlink" title="4. 接口电路的可编程性"></a>4. 接口电路的可编程性</h5><h3 id="3-I-O端口的编址"><a href="#3-I-O端口的编址" class="headerlink" title="3. I/O端口的编址"></a>3. I/O端口的编址</h3><ol><li>数据寄存器、状态寄存器和控制寄存器占有的I/O地址常依次被称为数据端口、状态端口和控制端口，用于保存数据、状态和控制信息</li><li>两类编排形式</li></ol><ul><li>I/O端口独立编址</li></ul><p><strong>优点</strong>：</p><ul><li>I/O端口的地址空间独立</li><li>控制和地址译码电路相对简单</li><li>专门的I/O指令使程序清晰易读</li></ul><p><strong>缺点</strong>：</p><ul><li>I/O指令没有存储器指令丰富</li><li>I/O端口与存储器统一编址</li></ul><p><strong>优点：</strong></p><ul><li>不需要专门的I/O指令</li><li>I/O数据存取与存储器数据存取一样灵活</li></ul><p><strong>缺点：</strong></p><ul><li>I/O端口要占去部分存储器地址空间</li><li>程序不易阅读（不易分清访存和访问外设）</li></ul><h3 id="4-8088-8086的输入输出指令"><a href="#4-8088-8086的输入输出指令" class="headerlink" title="4. 8088/8086的输入输出指令"></a>4. 8088/8086的输入输出指令</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入指令</span><br><span class="line"><span class="keyword">IN</span> <span class="built_in">AL</span>,i8<span class="comment">;字节输入，直接寻址</span></span><br><span class="line"><span class="keyword">IN</span> <span class="built_in">AL</span>,<span class="built_in">DX</span><span class="comment">;字节输入，间接寻址</span></span><br><span class="line"><span class="keyword">IN</span> <span class="built_in">AX</span>,i8<span class="comment">;字输入，直接寻址</span></span><br><span class="line"><span class="keyword">IN</span> <span class="built_in">AX</span>,<span class="built_in">DX</span><span class="comment">;字输入，间接寻址</span></span><br><span class="line">输出指令</span><br><span class="line"><span class="keyword">OUT</span> i8,<span class="built_in">AL</span><span class="comment">;字节输出，直接寻址</span></span><br><span class="line"><span class="keyword">OUT</span> <span class="built_in">DX</span>,<span class="built_in">AL</span><span class="comment">;字节输出，间接寻址</span></span><br><span class="line"><span class="keyword">OUT</span> i8,<span class="built_in">AX</span><span class="comment">;字输出，直接寻址</span></span><br><span class="line"><span class="keyword">OUT</span> <span class="built_in">DX</span>,<span class="built_in">AX</span><span class="comment">;字输出，间接寻址</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-8088-8086的I-O端口"><a href="#1-8088-8086的I-O端口" class="headerlink" title="1. 8088/8086的I/O端口"></a>1. 8088/8086的I/O端口</h5><ul><li>8086用于寻址外设端口的地址线为16条，端口最多为216＝65536（64K）个，端口号（端口地址）为0000H ~ FFFFH</li><li>每个端口地址对应一个字节空间</li></ul><ol><li>寻址方式</li></ol><ul><li>直接寻址：只用于寻址00H ~ FFH前256个端口，操作数i8表示端口号</li><li>间接寻址：可用于寻址全部64K个端口，DX寄存器的值就是端口号，对端口号大于FFH的端口只能采用间接寻址方式</li></ul><ol><li>数据交换</li></ol><ul><li>如果输入输出一个字节，使用AL寄存器</li><li>如果输入输出一个字，使用AX寄存器</li></ul><h3 id="5-I-O地址的译码"><a href="#5-I-O地址的译码" class="headerlink" title="5. I/O地址的译码"></a>5. I/O地址的译码</h3><h3 id="6-数据传送方式"><a href="#6-数据传送方式" class="headerlink" title="6. 数据传送方式"></a>6. 数据传送方式</h3><ul><li>程序控制下的数据传送：通过CPU执行程序中的I/O指令来完成传送，又分为：<strong>无条件传送、查询传送、中断传送</strong></li><li>直接存储器存取（DMA）——传送请求由外设向DMA控制器（DMAC）提出，后者向CPU申请总线，最后DMAC利用系统总线来完成外设和存储器间的数据传送</li><li>I/O处理机——CPU委托专门的I/O处理机来管理外设，完成传送和相应的数据处理</li></ul><h4 id="1-无条件传送方式及其接口"><a href="#1-无条件传送方式及其接口" class="headerlink" title="1. 无条件传送方式及其接口"></a>1. 无条件传送方式及其接口</h4><ul><li>在CPU与慢速变化的设备（或简单设备）交换数据时，可以认为它们总是<strong>处于“就绪”状态</strong>，随时可以进行数据传送</li><li>适合于简单设备，如LED数码管、开关等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">next:mov dx,8000h;DX指向数据端口</span><br><span class="line">in al,dx;从输入端口读开关状态</span><br><span class="line">not al;反相</span><br><span class="line">out dx,al;送输出端口显示</span><br><span class="line">call delay;调子程序延时</span><br><span class="line">jmp next;重复</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-查询传送方式及其接口"><a href="#2-查询传送方式及其接口" class="headerlink" title="2. 查询传送方式及其接口"></a>2. 查询传送方式及其接口</h5><ul><li>CPU需要先了解（<strong>查询</strong>）外设的工作状态，然后在外设可以交换信息的情况下（就绪）实现数据输入或输出</li><li>对多个外设的情况，则CPU按一定顺序依次查询（<strong>轮询</strong>）</li><li>查询传送的特点是：工作可靠，适用面宽，但传送效率低</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//查询输入接口程序示例</span><br><span class="line">mov dx,8000h;DX指向状态端口</span><br><span class="line">    status:in al,dx;读状态端口</span><br><span class="line">test al,01h;测试标志位D0</span><br><span class="line">jz status;D0＝0，未就绪，继续查询</span><br><span class="line">inc dx;D0＝1，就绪，DX指向数据端口</span><br><span class="line">in al,dx;从数据端口输入数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查询输出接口程序示例</span><br><span class="line">  mov dx,8000h;DX指向状态端口</span><br><span class="line">  status:in al,dx;读取状态端口的状态数据</span><br><span class="line">test al,80h;测试标志位D7</span><br><span class="line">jnz status;D7＝1，未就绪，继续查询</span><br><span class="line">inc dx;D7＝0，就绪，DX指向数据端口</span><br><span class="line">mov al,buf;变量buf送AL</span><br><span class="line">out dx,al;将数据输出给数据端口</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//查询方式的EEPROM编程</span><br><span class="line">next:mov al,55h;写入内容＝55H</span><br><span class="line">mov [bx],al;写入存储单元</span><br><span class="line">nop;空操作指令，起延时作用</span><br><span class="line">nop</span><br><span class="line">next1:in al,dx;查询状态口</span><br><span class="line">test al,01h;测试D0</span><br><span class="line">jz next1;D0＝0，芯片还在写入</span><br><span class="line">inc bx;D0＝1，写毕，指针移动</span><br><span class="line">loop next;循环至全部字节写完</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-中断传送方式"><a href="#3-中断传送方式" class="headerlink" title="3. 中断传送方式"></a>3. 中断传送方式</h5><ul><li>中断请求 =&gt;中断响应=&gt;关中断=&gt;断点保护=&gt;中断识别=&gt;现场保护=&gt;中断服务=&gt;恢复现场=&gt;开中断=&gt;中断返回</li><li>中断传送是一种效率更高的程序传送方式</li><li>进行传送的中断服务程序是预先设计好的</li><li>中断请求是外设随机向CPU提出的</li></ul><h5 id="4-DMA传送方式"><a href="#4-DMA传送方式" class="headerlink" title="4. DMA传送方式"></a>4. DMA传送方式</h5><ul><li>CPU对DMA控制器进行初始化设置</li><li>外设、DMAC和CPU三者通过应答信号建立联系：CPU将总线交给DMAC控制</li></ul><ol><li>DMA传送<br>DMA读存储器：存储器 → 外设<br>DMA写存储器：存储器 ← 外设</li><li>自动增减地址和计数，判断传送完成否</li></ol><p><strong>传送方式的比较</strong></p><ul><li>无条件传送：慢速外设需与CPU保持同步</li><li>查询传送： 简单实用，效率较低</li><li>中断传送：外设主动，可与CPU并行工作，但每次传送需要大量额外时间开销</li><li>DMA传送：DMAC控制，外设直接和存储器进行数据传送，适合大量、快速数据传送</li></ul><hr><h2 id="第四章-中断控制接口"><a href="#第四章-中断控制接口" class="headerlink" title="第四章 中断控制接口"></a>第四章 中断控制接口</h2><h3 id="1-8088中断系统"><a href="#1-8088中断系统" class="headerlink" title="1. 8088中断系统"></a>1. 8088中断系统</h3><ul><li>8088的中断系统采用向量中断机制</li><li>能够处理256个中断</li><li>用中断向量号0～255区别</li><li>可屏蔽中断还需要借助专用中断控制器Intel 8259A实现优先权管理</li></ul><h5 id="1-8088的中断类型"><a href="#1-8088的中断类型" class="headerlink" title="1. 8088的中断类型"></a>1. 8088的中断类型</h5><ul><li>内部中断:除法错中断、指令中断、溢出中断、单步中断</li><li>外部中断：非屏蔽中断、可屏蔽中断</li></ul><h5 id="2-8088的中断响应过程"><a href="#2-8088的中断响应过程" class="headerlink" title="2. 8088的中断响应过程"></a>2. 8088的中断响应过程</h5><p><img src="/image/04.png" alt="04"></p><ul><li>8088各种中断源的优先权，实际上是指被识别出来的先后</li><li>多种中断同时请求时，最先响应的则可能是单步中断或NMI中断</li></ul><p><img src="/image/05.png" alt="05"></p><h5 id="3-8088的中断向量表"><a href="#3-8088的中断向量表" class="headerlink" title="3. 8088的中断向量表"></a>3. 8088的中断向量表</h5><ul><li>中断向量：中断服务程序的入口地址（首地址）</li><li>逻辑地址含有段地址CS和偏移地址IP（32位）</li><li>每个中断向量的低字是偏移地址、高字是段地址，需占用4个字节</li><li>8088微处理器从物理地址00000H开始，依次安排各个中断向量，向量号也从0开始</li><li>256个中断占用1KB区域，就形成中断向量表</li><li>向量号为N的中断向量的物理地址＝N×4</li></ul><h3 id="2-内部中断服务程序"><a href="#2-内部中断服务程序" class="headerlink" title="2. 内部中断服务程序"></a>2. 内部中断服务程序</h3><h5 id="1-内部中断服务程序"><a href="#1-内部中断服务程序" class="headerlink" title="1. 内部中断服务程序"></a>1. 内部中断服务程序</h5><p>编写80H号中断服务程序<br>功能：显示以“0”结尾字符串的功能,利用显示器功能调用INT 10H，字符串缓冲区首地址为入口参数，DS:DX（段地址：偏移地址）传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">    intoffdw ?//偏移</span><br><span class="line">intsegdw ?//段基址</span><br><span class="line">intmsgdb ‘A Instruction Interrupt !’//字符串</span><br><span class="line">db 0dh,0ah,0</span><br><span class="line">//保存中断向量</span><br><span class="line">    mov ax,3580h//AH＝35H，AL=中断向量号</span><br><span class="line">int 21h //DOS功能调用INT 21H</span><br><span class="line">mov intoff,bx;保存偏移地址</span><br><span class="line">mov intseg,es;保存段基地址</span><br><span class="line">    //设置中断向量</span><br><span class="line">    //设置中断向量（DOS功能调用INT 21H）</span><br><span class="line">    push ds</span><br><span class="line">    mov dx,offset new80h</span><br><span class="line">    mov ax,seg new80h</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov ax,2580h//AH=25，AL＝中断向量号</span><br><span class="line">    int 21h</span><br><span class="line">    pop ds</span><br><span class="line">    //调用中断服务程序，设置入口参数：//DS＝段地址（已设置）</span><br><span class="line">//；DX＝偏移地址</span><br><span class="line">    mov dx,offset intmsg</span><br><span class="line">int 80h ；调用80H中断服务程序</span><br><span class="line">//主程序结束</span><br><span class="line">    mov dx,intoff</span><br><span class="line">mov ax,intseg</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,2580h</span><br><span class="line">int 21h</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">//进入中断服务程序</span><br><span class="line">new80hproc</span><br><span class="line">sti;开中断</span><br><span class="line">push ax;保护寄存器</span><br><span class="line">push bx</span><br><span class="line">push si</span><br><span class="line">mov si,dx</span><br><span class="line">//显示字符串</span><br><span class="line">new1:mov al,[si]</span><br><span class="line">cmp al,0</span><br><span class="line">jz new2</span><br><span class="line">mov bx,0</span><br><span class="line">mov ah,0eh</span><br><span class="line">int 10h</span><br><span class="line">inc si</span><br><span class="line">jmp new1</span><br><span class="line">//退出中断服务程序</span><br><span class="line">new2:pop si;恢复寄存器</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">iret;中断返回</span><br><span class="line">new80hendp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-8259A中断控制器"><a href="#3-8259A中断控制器" class="headerlink" title="3. 8259A中断控制器"></a>3. 8259A中断控制器</h3><h5 id="1-8259A的内部结构和引脚"><a href="#1-8259A的内部结构和引脚" class="headerlink" title="1. 8259A的内部结构和引脚"></a>1. 8259A的内部结构和引脚</h5><ol><li>中断控制</li></ol><ul><li>中断请求寄存器IRR<br>保存8条外界中断请求信号IR0～IR7的请求状态<br>Di位为1表示IRi引脚有中断请求；为0表示无请求</li><li>中断服务寄存器ISR<br>保存正在被8259A服务着的中断状态<br>Di位为1表示IRi中断正在服务中；为0表示没有被服务</li><li>中断屏蔽寄存器IMR<br>保存对中断请求信号IR的屏蔽状态<br>Di位为1表示IRi中断被屏蔽（禁止）；为0表示允许</li></ul><ol><li>与处理器接口</li></ol><p><img src="/image/06.png" alt="06"></p><ol><li>中断级连</li></ol><ul><li>一个系统中，8259A可以级连，有一个主8259A，若干个（最多8个）从8259A</li><li>级连时，主8259A的三条级连线CAS0～CAS2作为输出线，连至每个从8259A的CAS0～CAS2</li><li>SP<em>/EN</em>在非缓冲方式下，规定该8259A是主片（SP<em>＝1）还是从片（SP</em>＝0）</li></ul><h5 id="3-8259A的工作方式"><a href="#3-8259A的工作方式" class="headerlink" title="3. 8259A的工作方式"></a>3. 8259A的工作方式</h5><ol><li>设置优先权方式</li></ol><ul><li>普通全嵌套方式</li><li>特殊全嵌套方式</li><li>优先权自动循环方式</li></ul><ol><li>结束中断处理方式</li></ol><ul><li>8259A利用中断服务寄存器ISR判断：<br>某位为1，表示正在进行中断服务；<br>该位为0，就是该中断结束服务。</li><li>自动中断结束方式</li><li>普通中断结束方式，配合全嵌套优先权方式使用</li><li>特殊中断结束方式，配合循环优先权方式使用</li></ul><ol><li>屏蔽中断源方式</li></ol><ul><li>普通屏蔽方式<br>将IMR的Di位置1，则对应的中断IRi被屏蔽</li><li>特殊屏蔽方式<br>将IMR的Di位置1，对应的中断IRi被屏蔽的同时，使ISR的Di位置0</li></ul><ol><li>中断触发方式</li></ol><ul><li>边沿触发方式</li><li>电平触发方式</li></ul><ol><li>数据线连接方式</li></ol><ul><li>缓冲方式<br>8259A的数据线需加缓冲器予以驱动<br>8259A把SP<em>/EN</em>引脚作为输出端，输出允许信号，用以锁存或开启缓冲器</li><li>非缓冲方式<br>SP<em>/EN</em>引脚为输入端<br>若8259A级连，由其确定是主片或从片</li></ul><h5 id="4-8259A的编程"><a href="#4-8259A的编程" class="headerlink" title="4. 8259A的编程"></a>4. 8259A的编程</h5><ol><li>初始化命令字ICW</li></ol><ul><li>初始化命令字ICW最多有4个</li><li>8259A在开始工作前必须写入</li><li>必须按照ICW1～ICW4顺序写入</li><li>ICW1和ICW2是必须送的</li><li>ICW3和ICW4由工作方式决定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">中断控制器的初始化程序段</span><br><span class="line">//初始化主片8259A</span><br><span class="line">mov al,11h;写入ICW1</span><br><span class="line">out 20h,al</span><br><span class="line">jmp intr1</span><br><span class="line">intr1:mov al,08h;写入ICW2</span><br><span class="line">out 21h,al</span><br><span class="line">jmp intr2</span><br><span class="line">intr2:mov al,04h;写入ICW3</span><br><span class="line">out 21h,al</span><br><span class="line">jmp intr3</span><br><span class="line">intr3:mov al,1h;写入ICW4</span><br><span class="line">out 21h,al</span><br><span class="line">//初始化从片8259A</span><br><span class="line">mov al,11h;写入ICW1</span><br><span class="line">out 0a0h,al</span><br><span class="line">jmp intr5</span><br><span class="line">intr5:mov al,70h;写入ICW2</span><br><span class="line">out 0a1h,al</span><br><span class="line">jmp intr6</span><br><span class="line">intr6:mov al,02h;写入ICW3</span><br><span class="line">out 0a1h,al</span><br><span class="line">jmp intr7</span><br><span class="line">intr7:mov al, 01h;写入ICW4</span><br><span class="line">out 0a1h,al</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>操作命令字OCW</li></ol><ul><li>OCW共有3个：OCW1～OCW3</li><li>写入时没有顺序要求，需要哪个OCW就写入那个OCW</li></ul><p><strong>应用注意事项</strong></p><ul><li>利用上升沿做为中断请求IRQ的有效信号</li><li>IRQ0～IRQ7的中断向量号依次为08H～0FH，IRQ8～IRQ15依次为70H～77H</li><li>采用普通全嵌套优先权方式，中断优先权从高到低顺序为IRQ0～IRQ2、IRQ8～IRQ15、IRQ3～IRQ7，且不能改变</li></ul><h5 id="5-外部中断服务程序"><a href="#5-外部中断服务程序" class="headerlink" title="5. 外部中断服务程序"></a>5. 外部中断服务程序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">/*8259A的IRQ0（向量号为08H）中断请求来自定时器8253，每隔55ms产生一次</span><br><span class="line"></span><br><span class="line">本程序的08H号中断服务程序，每次中断显示一串信息，显示10次</span><br><span class="line">*/</span><br><span class="line">intmsgdb ‘A 8259A Interrupt !’</span><br><span class="line">         db 0dh,0ah,0</span><br><span class="line">counterdb 0</span><br><span class="line">mov ax,3508h</span><br><span class="line">int 21h</span><br><span class="line">push bx;保存偏移地址</span><br><span class="line">push es;保存段基地址</span><br><span class="line">//设置中断向量</span><br><span class="line">cli</span><br><span class="line">push ds</span><br><span class="line">mov dx,offset new08h</span><br><span class="line">mov ax,seg new08h</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,2508h</span><br><span class="line">int 21h</span><br><span class="line">pop ds</span><br><span class="line">//设置中断寄存器</span><br><span class="line">in al,21h</span><br><span class="line">push ax</span><br><span class="line">and al,0feh         ;允许IRQ0</span><br><span class="line">out 21h,al</span><br><span class="line">mov counter,0;设置中断次数初值</span><br><span class="line">sti         ;开中断</span><br><span class="line">//循环等待中断</span><br><span class="line">start1:cmp counter,10</span><br><span class="line"> jb start1          ;中断10次退出</span><br><span class="line"> //子程序结束</span><br><span class="line"> cli</span><br><span class="line">pop ax</span><br><span class="line">out 21h,al</span><br><span class="line">pop dx</span><br><span class="line">pop ds</span><br><span class="line">mov ax,2508h</span><br><span class="line">int 21h</span><br><span class="line">sti</span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">        //进入中断服务程序</span><br><span class="line">new08hproc</span><br><span class="line">  sti         ;开中断</span><br><span class="line">  push ax;保护寄存器</span><br><span class="line">  push bx</span><br><span class="line">  push ds</span><br><span class="line">  mov ax,data</span><br><span class="line">  mov ds,ax;设置数据段DS</span><br><span class="line">//中断处理</span><br><span class="line">inc counter</span><br><span class="line">mov si,offset intmsg;显示信息</span><br><span class="line">call dpstri</span><br><span class="line">//</span><br><span class="line">     mov al,20h</span><br><span class="line">     out 20h,al</span><br><span class="line">     pop ds       ;恢复寄存器</span><br><span class="line">     pop bx</span><br><span class="line">     pop ax</span><br><span class="line">     iret       ;中断返回</span><br><span class="line">new08h endp</span><br><span class="line">//显示字符串</span><br><span class="line">dpstri proc        ;显示字符串子程序</span><br><span class="line"> push ax</span><br><span class="line"> push bx</span><br><span class="line">dps1: lodsb</span><br><span class="line"> cmp al,0</span><br><span class="line"> jz dps2</span><br><span class="line">//显示字符串</span><br><span class="line"> mov bx,0</span><br><span class="line"> mov ah,0eh</span><br><span class="line"> int 10h</span><br><span class="line"> jmp dps1</span><br><span class="line">dps2: pop bx</span><br><span class="line"> pop ax</span><br><span class="line"> ret</span><br><span class="line">dpstri endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第五章-定时计数控制接口"><a href="#第五章-定时计数控制接口" class="headerlink" title="第五章 定时计数控制接口"></a>第五章 定时计数控制接口</h2><h3 id="8253-8254定时计数器"><a href="#8253-8254定时计数器" class="headerlink" title="8253/8254定时计数器"></a>8253/8254定时计数器</h3><ul><li>3个独立的16位计数器通道</li><li>每个计数器有6种工作方式</li><li>按二进制或十进制（BCD码）计数</li></ul><ol><li>计数器结构分析</li></ol><ul><li>计数初值存于预置寄存器；</li><li>在计数过程中，减法计数器的值不断递减，而预置寄存器中的预置不变。</li><li>输出锁存器用于写入锁存命令时，锁定当前计数值</li></ul><ol><li>计数器的3个引脚</li></ol><ul><li>CLK时钟输入信号——在计数过程中，此引脚上每输入一个时钟信号（下降沿），计数器的计数值减1</li><li>GATE门控输入信号——控制计数器工作，可分成电平控制和上升沿控制两种类型</li><li>OUT计数器输出信号——当一次计数过程结束（计数值减为0），OUT引脚上将产生一个输出信号</li></ul><h3 id="8253-8254的工作方式"><a href="#8253-8254的工作方式" class="headerlink" title="8253/8254的工作方式"></a>8253/8254的工作方式</h3><ul><li>方式0 计数结束中断</li><li>方式1 可编程单稳脉冲</li><li>方式2 频率发生器（分频器）</li><li>方式3 方波发生器</li><li>方式4 软件触发选通信号</li><li>方式5 硬件触发选通信号</li></ul><ol><li>注意</li></ol><ul><li>处理器写入8253的计数初值只是写入了预置寄存器，之后到来的第一个CLK输入脉冲（需先由低电平变高，再由高变低）才将预置寄存器的初值送到减1计数器。</li><li>从第二个CLK信号的下降沿，计数器才真正开始减1计数。</li></ul><h3 id="8253-8254的编程"><a href="#8253-8254的编程" class="headerlink" title="8253/8254的编程"></a>8253/8254的编程</h3><hr><h2 id="第六章-DMA控制接口"><a href="#第六章-DMA控制接口" class="headerlink" title="第六章 DMA控制接口"></a>第六章 DMA控制接口</h2><h3 id="DMA控制器8237A"><a href="#DMA控制器8237A" class="headerlink" title="DMA控制器8237A"></a>DMA控制器8237A</h3><ul><li>每个8237A芯片有4个DMA通道，就是有4个DMA控制器</li><li>每个DMA通道具有不同的优先权</li><li>每个DMA通道可以分别允许和禁止</li><li>每个DMA通道有4种工作方式</li><li>一次传送的最大长度可达64KB</li><li>多个8237A芯片可以级连，扩展通道数</li></ul><h5 id="1-8237A的内部结构和引脚"><a href="#1-8237A的内部结构和引脚" class="headerlink" title="1. 8237A的内部结构和引脚"></a>1. 8237A的内部结构和引脚</h5><ol><li>请求与响应信号</li></ol><ul><li>DREQ0～DREQ3：DMA通道请求</li><li>HRQ：总线请求</li><li>HLDA：总线响应</li><li>DACK0～DACK3：DMA通道响应</li></ul><ol><li>DMA传送控制信号</li></ol><ul><li>A0～A7：地址线。输出低8位存储器地址。<br>DB0～DB7：数据线。输出高8位存储器地址</li><li>ADSTB：地址选通</li><li>AEN：地址允许。</li><li>MEMR*：存储器读</li><li>MEMW*：存储器写</li><li>IOR*：I/O读</li><li>IOW*：I/O写</li><li>READY：准备好</li><li>EOP*：过程结束。DMA传送过程结束，输出一个低有效脉冲。</li></ul><ol><li>处理器接口信号</li></ol><ul><li>DB0～DB7：数据线。</li><li>A0～A3：地址线。</li><li>CS*：片选</li><li>IOR*：I/O读。读取8237A内部寄存器。</li><li>IOW*：I/O写。写入8237A内部寄存器。</li><li>CLK：时钟。控制芯片内部操作和数据传输。</li><li>RESET：复位。使8237A处于初始状态。</li></ul><p><strong>8237A的两种工作状态</strong></p><ul><li>空闲周期：<br>作为接口电路，受CPU控制的工作状态</li><li>有效周期：<br>作为DMAC控制DMA传送的工作状态</li></ul><p><img src="/image/07.png" alt="07"></p><h5 id="2-8237A的工作时序·空闲周期"><a href="#2-8237A的工作时序·空闲周期" class="headerlink" title="2. 8237A的工作时序·空闲周期"></a>2. 8237A的工作时序·空闲周期</h5><p><strong>DMA传送时序</strong></p><ul><li>S1状态——输出16位存储器地址<br>AEN输出高电平，表示DMA传送</li><li>S2状态——输出DMA响应信号和控制信号<br>DMA读：MEMR<em>和IOW</em>有效<br>DMA写：IOR<em>和MEMW</em>有效</li><li>S3和Sw状态——检测数据传送是否能够完成，决定是否插入等待状态Sw</li><li>S4状态——完成数据传送</li></ul><h5 id="3-8237A的工作方式"><a href="#3-8237A的工作方式" class="headerlink" title="3. 8237A的工作方式"></a>3. 8237A的工作方式</h5><ol><li>DMA传送方式</li></ol><ul><li>单字节传送方式：一次传送一个字节，效率略低，<br>DMA传送之间CPU有机会重新获取总线控制权</li><li>数据块传送方式：一次请求传送一个数据块，效率高，<br>整个DMA传送期间CPU长时间无法控制总线</li><li>请求传送方式<br>DREQ信号有效就连续传送数据<br>DREQ信号无效，DMA传送被暂时中止，8237A释放总线，CPU可继续操作</li><li>级连方式</li></ul><ol><li>DMA传送类型<br>· DMA读 · DMA写 · DMA检验</li><li>DMA通道的优先权方式</li></ol><ul><li>固定优先权方式——优先权固定：0，1，2.。。</li><li>循环优先权方式——优先权循环变化</li></ul><ol><li>自动初始化方式</li></ol><h5 id="4-8237A的寄存器"><a href="#4-8237A的寄存器" class="headerlink" title="4. 8237A的寄存器"></a>4. 8237A的寄存器</h5><ol><li>通道寄存器（4个通道分别具有）：基地址寄存器、基字节数寄存器、现行地址寄存器、现行字节数寄存器。</li><li>状态、命令寄存器：命令寄存器、状态寄存器、请求寄存器、方式寄存器、屏蔽寄存器、临时寄存器</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微机原理与接口技术&quot;&gt;&lt;a href=&quot;#微机原理与接口技术&quot; class=&quot;headerlink&quot; title=&quot;微机原理与接口技术&quot;&gt;&lt;/a&gt;微机原理与接口技术&lt;/h1&gt;&lt;h2 id=&quot;第一章-微型计算机系统概述&quot;&gt;&lt;a href=&quot;#第一章-微型计算机系统概</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://github.com/AlanCarte/AlanCarte.github.io/project/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/AlanCarte/AlanCarte.github.io/project/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
